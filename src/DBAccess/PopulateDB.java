package DBAccess;

import java.io.File;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import org.hsqldb.cmdline.SqlFile;

import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import model.Property;

public class PopulateDB extends DBConnecter {
	public static final String CREATE_RENTAL_PROP = "CREATE TABLE  IF NOT EXISTS RENTAL_PROPERTY "+
	"("+
	"	ID INT GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1) PRIMARY KEY,"+
	"	PROPERTY_ID VARCHAR(100) UNIQUE,"+
	"	IMAGE_URL VARCHAR(100),"+
	"	NUM_BEDROOMS INT,"+
	"	TYPE_NAME VARCHAR(50),"+
	"	STATUS VARCHAR(50),"+
	"	SHORT_DESCRIPTION CLOB,"+
	"	LONG_DESCRIPTION CLOB,"+
	"	STREET_NUM INTEGER,"+
	"	STREET_NAME VARCHAR(300),"+
	"	SUBURB VARCHAR(100),"+
	"	IN_MAINTENANCE VARCHAR(5),"+
	"	FEE_PER_DAY DOUBLE"+
	")";
	
	public static final String CREATE_RENTAL_RECORD = "CREATE TABLE  IF NOT EXISTS RENTAL_RECORD"+
	"("+
	"	ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1) PRIMARY KEY,"+
	"	PROPERTY_ID VARCHAR(100),"+
	"	START_DATE DATE,"+
	"	ESTIMATED_RETURN_DATE DATE,"+
	"	ACTUAL_RETURN_DATE DATE,"+
	"	RENTAL_FEE DOUBLE,"+
	"	LATE_FEE DOUBLE,"+
	"	TOTAL_DUE DOUBLE,"+
	"	CUSTOMER VARCHAR(100),"+
	"	FOREIGN KEY (PROPERTY_ID) REFERENCES RENTAL_PROPERTY(PROPERTY_ID)"+
	")";

	private static final String DROP_RENTAL_PROP = "DROP TABLE IF EXISTS RENTAL_RECORD";
	private static final String DROP_RENTAL_RECORD = "DROP TABLE IF EXISTS RENTAL_RECORD";
	public static void populateData(boolean reset)
	{
		PropertyDao pDoa = new PropertyDao();
		Property property = new Property();
		//pDoa.insertProperty(property );
	}
	public static void populateDB(boolean reset)
	{
	Connection connection;
	try {
			connection = DBConnecter.getConnection();
			if(reset)
			{
				Statement statement = connection.createStatement();
				statement.execute(DROP_RENTAL_PROP);
				statement = connection.createStatement();
				statement.execute(DROP_RENTAL_RECORD);
			}
			Statement statement = connection.createStatement();
			statement.execute(CREATE_RENTAL_PROP);
			statement = connection.createStatement();
			statement.execute(CREATE_RENTAL_RECORD);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e)  {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("Exception");
			alert.setHeaderText("SQL Exception");
			alert.setContentText("Ooops, there was an undefined error!");
			alert.showAndWait();
		} 
	}
	
}
